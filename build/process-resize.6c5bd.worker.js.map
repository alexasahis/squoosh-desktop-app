{"version":3,"sources":["webpack:///./codecs/resize/pkg/resize.js","webpack:///./src/codecs/resize/processor.ts","webpack:///./src/codecs/resize/util.ts","webpack:///./codecs/resize/pkg/resize_bg.wasm"],"names":["wasm","__exports","cachegetUint8Memory","getUint8Memory","buffer","memory","Uint8Array","WASM_VECTOR_LEN","cachedGlobalArgumentPtr","cachegetUint32Memory","resize","arg0","arg1","arg2","arg3","arg4","arg5","arg6","arg7","ptr0","arg","ptr","__wbindgen_malloc","length","set","passArray8ToWasm","len0","retptr","__wbindgen_global_argument_ptr","mem","Uint32Array","rustptr","rustlen","realRet","len","subarray","getArrayU8FromWasm","slice","__wbindgen_free","heap","Array","fill","undefined","push","heap_next","__wbindgen_object_drop_ref","i","idx","dropObject","self","wasm_bindgen","Object","assign","init","path_or_module","instantiation","imports","./resize","WebAssembly","Module","instantiate","then","instance","module","data","fetch","instantiateStreaming","catch","e","console","warn","r","arrayBuffer","bytes","response","exports","__webpack_require__","d","__webpack_exports__","processor_resize","ready","resize_bg_default","a","resizeMethods","async","opts","input","fitMethod","sx","sy","sw","sh","dw","dh","endAspect","newSh","newSw","getContainOffsets","width","height","inputPixels","y","start","copyWithin","ImageData","Uint8ClampedArray","crop","Math","round","result","indexOf","method","premultiply","linearRGB","p"],"mappings":"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","file":"process-resize.6c5bd.worker.js","sourcesContent":["(function() {\n    var wasm;\n    const __exports = {};\n\n\n    let cachegetUint8Memory = null;\n    function getUint8Memory() {\n        if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n            cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n        }\n        return cachegetUint8Memory;\n    }\n\n    let WASM_VECTOR_LEN = 0;\n\n    function passArray8ToWasm(arg) {\n        const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n        getUint8Memory().set(arg, ptr / 1);\n        WASM_VECTOR_LEN = arg.length;\n        return ptr;\n    }\n\n    function getArrayU8FromWasm(ptr, len) {\n        return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n    }\n\n    let cachedGlobalArgumentPtr = null;\n    function globalArgumentPtr() {\n        if (cachedGlobalArgumentPtr === null) {\n            cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n        }\n        return cachedGlobalArgumentPtr;\n    }\n\n    let cachegetUint32Memory = null;\n    function getUint32Memory() {\n        if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n            cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n        }\n        return cachegetUint32Memory;\n    }\n    /**\n    * @param {Uint8Array} arg0\n    * @param {number} arg1\n    * @param {number} arg2\n    * @param {number} arg3\n    * @param {number} arg4\n    * @param {number} arg5\n    * @param {boolean} arg6\n    * @param {boolean} arg7\n    * @returns {Uint8Array}\n    */\n    __exports.resize = function(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n        const ptr0 = passArray8ToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const retptr = globalArgumentPtr();\n        wasm.resize(retptr, ptr0, len0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n    };\n\n    const heap = new Array(32);\n\n    heap.fill(undefined);\n\n    heap.push(undefined, null, true, false);\n\n    let heap_next = heap.length;\n\n    function dropObject(idx) {\n        if (idx < 36) return;\n        heap[idx] = heap_next;\n        heap_next = idx;\n    }\n\n    __exports.__wbindgen_object_drop_ref = function(i) { dropObject(i); };\n\n    function init(path_or_module) {\n        let instantiation;\n        const imports = { './resize': __exports };\n        if (path_or_module instanceof WebAssembly.Module) {\n            instantiation = WebAssembly.instantiate(path_or_module, imports)\n            .then(instance => {\n            return { instance, module: path_or_module }\n        });\n    } else {\n        const data = fetch(path_or_module);\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            instantiation = WebAssembly.instantiateStreaming(data, imports)\n            .catch(e => {\n                console.warn(\"`WebAssembly.instantiateStreaming` failed. Assuming this is because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                return data\n                .then(r => r.arrayBuffer())\n                .then(bytes => WebAssembly.instantiate(bytes, imports));\n            });\n        } else {\n            instantiation = data\n            .then(response => response.arrayBuffer())\n            .then(buffer => WebAssembly.instantiate(buffer, imports));\n        }\n    }\n    return instantiation.then(({instance}) => {\n        wasm = init.wasm = instance.exports;\n\n    });\n};\nself.wasm_bindgen = Object.assign(init, __exports);\n})();\n\n\n/*** EXPORTS FROM exports-loader ***/\n","import wasmUrl from '../../../codecs/resize/pkg/resize_bg.wasm';\nimport '../../../codecs/resize/pkg/resize';\nimport { WorkerResizeOptions } from './processor-meta';\nimport { getContainOffsets } from './util';\n\ninterface WasmBindgenExports {\n  resize: typeof import('../../../codecs/resize/pkg/resize').resize;\n}\n\ntype WasmBindgen = ((url: string) => Promise<void>) & WasmBindgenExports;\n\ndeclare var wasm_bindgen: WasmBindgen;\n\nconst ready = wasm_bindgen(wasmUrl);\n\nfunction crop(data: ImageData, sx: number, sy: number, sw: number, sh: number): ImageData {\n  const inputPixels = new Uint32Array(data.data.buffer);\n\n  // Copy within the same buffer for speed and memory efficiency.\n  for (let y = 0; y < sh; y += 1) {\n    const start = ((y + sy) * data.width) + sx;\n    inputPixels.copyWithin(y * sw, start, start + sw);\n  }\n\n  return new ImageData(\n    new Uint8ClampedArray(inputPixels.buffer.slice(0, sw * sh * 4)),\n    sw, sh,\n  );\n}\n\n/** Resize methods by index */\nconst resizeMethods: WorkerResizeOptions['method'][] = [\n  'triangle', 'catrom', 'mitchell', 'lanczos3',\n];\n\nexport async function resize(data: ImageData, opts: WorkerResizeOptions): Promise<ImageData> {\n  let input = data;\n\n  if (opts.fitMethod === 'contain') {\n    const { sx, sy, sw, sh } = getContainOffsets(data.width, data.height, opts.width, opts.height);\n    input = crop(input, Math.round(sx), Math.round(sy), Math.round(sw), Math.round(sh));\n  }\n\n  await ready;\n\n  const result = wasm_bindgen.resize(\n    new Uint8Array(input.data.buffer), input.width, input.height, opts.width, opts.height,\n    resizeMethods.indexOf(opts.method), opts.premultiply, opts.linearRGB,\n  );\n\n  return new ImageData(new Uint8ClampedArray(result.buffer), opts.width, opts.height);\n}\n","export function getContainOffsets(sw: number, sh: number, dw: number, dh: number) {\n  const currentAspect = sw / sh;\n  const endAspect = dw / dh;\n\n  if (endAspect > currentAspect) {\n    const newSh = sw / endAspect;\n    const newSy = (sh - newSh) / 2;\n    return { sw, sh: newSh, sx: 0, sy: newSy };\n  }\n\n  const newSw = sh * endAspect;\n  const newSx = (sw - newSw) / 2;\n  return { sh, sw: newSw, sx: newSx, sy: 0 };\n}\n","module.exports = __webpack_public_path__ + \"resize_bg.21377.wasm\";"],"sourceRoot":""}