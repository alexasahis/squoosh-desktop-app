self.webpackChunk([4],{10:function(n,e){!function(){var n;const e={};let t=null;function i(){return null!==t&&t.buffer===n.memory.buffer||(t=new Uint8Array(n.memory.buffer)),t}let r=0;let s=null;let a=null;e.resize=function(e,t,o,l,u,c,f,h){const b=function(e){const t=n.__wbindgen_malloc(1*e.length);return i().set(e,t/1),r=e.length,t}(e),m=r,w=(null===s&&(s=n.__wbindgen_global_argument_ptr()),s);n.resize(w,b,m,t,o,l,u,c,f,h);const d=(null!==a&&a.buffer===n.memory.buffer||(a=new Uint32Array(n.memory.buffer)),a),y=d[w/4],g=d[w/4+1],_=function(n,e){return i().subarray(n/1,n/1+e)}(y,g).slice();return n.__wbindgen_free(y,1*g),_};const o=new Array(32);o.fill(void 0),o.push(void 0,null,!0,!1);let l=o.length;e.__wbindgen_object_drop_ref=function(n){!function(n){n<36||(o[n]=l,l=n)}(n)},self.wasm_bindgen=Object.assign(function t(i){let r;const s={"./resize":e};if(i instanceof WebAssembly.Module)r=WebAssembly.instantiate(i,s).then(n=>({instance:n,module:i}));else{const n=fetch(i);r="function"==typeof WebAssembly.instantiateStreaming?WebAssembly.instantiateStreaming(n,s).catch(e=>(console.warn("`WebAssembly.instantiateStreaming` failed. Assuming this is because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",e),n.then(n=>n.arrayBuffer()).then(n=>WebAssembly.instantiate(n,s)))):n.then(n=>n.arrayBuffer()).then(n=>WebAssembly.instantiate(n,s))}return r.then(({instance:e})=>{n=t.wasm=e.exports})},e)}()},24:function(n,e,t){"use strict";t.r(e);var i=t(9),r=t.n(i);t(10);t.d(e,"resize",function(){return o});const s=wasm_bindgen(r.a);const a=["triangle","catrom","mitchell","lanczos3"];async function o(n,e){let t=n;if("contain"===e.fitMethod){const{sx:i,sy:r,sw:s,sh:a}=function(n,e,t,i){const r=t/i;if(r>n/e){const t=n/r;return{sw:n,sh:t,sx:0,sy:(e-t)/2}}const s=e*r;return{sh:e,sw:s,sx:(n-s)/2,sy:0}}(n.width,n.height,e.width,e.height);t=function(n,e,t,i,r){const s=new Uint32Array(n.data.buffer);for(let a=0;a<r;a+=1){const r=(a+t)*n.width+e;s.copyWithin(a*i,r,r+i)}return new ImageData(new Uint8ClampedArray(s.buffer.slice(0,i*r*4)),i,r)}(t,Math.round(i),Math.round(r),Math.round(s),Math.round(a))}await s;const i=wasm_bindgen.resize(new Uint8Array(t.data.buffer),t.width,t.height,e.width,e.height,a.indexOf(e.method),e.premultiply,e.linearRGB);return new ImageData(new Uint8ClampedArray(i.buffer),e.width,e.height)}},9:function(n,e,t){n.exports=t.p+"resize_bg.21377.wasm"}});
//# sourceMappingURL=process-resize.6c5bd.worker.js.map